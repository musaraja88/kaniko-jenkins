pipeline {

  agent {
    kubernetes {
      yamlFile 'kaniko-builder.yaml'
    }
  }

  environment {
        APP_NAME = "java-test"
        RELEASE = "1.0.0"

        DOCKER_CREDENTIALS = credentials('docker-cred')
        DOCKER_USER = "${DOCKER_CREDENTIALS_USR}"
        DOCKER_PASS = "${DOCKER_CREDENTIALS_PSW}"
        IMAGE_NAME = "${DOCKER_USER}" + "/" + "${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
        SONARQUBE_SCANNER_HOME = tool 'SonarQubeScanner'
        SONARQUBE_SERVER_SERVICE_NAME = 'sonarqube'
        SONARQUBE_SERVER_PORT = '80'
        SONARQUBE_SERVER_NAMESPACE = 'sonarqube'
        SONARQUBE_SERVER_URL = "http://${SONARQUBE_SERVER_SERVICE_NAME}.${SONARQUBE_SERVER_NAMESPACE}:${SONARQUBE_SERVER_PORT}"
//        SONARQUBE_SERVER_URL = 'https://sonarqube.192.168.1.220.nip.io/'
        SONARQUBE_TOKEN = credentials('sonar-token')

    }

  stages {

    stage("Cleanup Workspace") {
      steps {
        cleanWs()
      }
    }

    stage("Checkout from SCM"){
        steps {
            git branch: 'main', credentialsId: 'github', url: 'https://github.com/musaraja88/kaniko-jenkins'
            sh 'pwd'
            sh 'ls -lrt'
        }

    }

    stage('SonarQube Analysis') {
        steps {
            script {
                // Run SonarQube analysis using the automatically installed SonarQube Scanner
                //sh "${SONARQUBE_SCANNER_HOME}/bin/sonar-scanner"
                withSonarQubeEnv('SonarQube') {
                        sh "${SONARQUBE_SCANNER_HOME}/bin/sonar-scanner -Dsonar.host.url=${SONARQUBE_SERVER_URL} -Dsonar.login=${SONARQUBE_TOKEN}"
                }
            }
        }
    }

    stage('Build & Push with Kaniko') {
      steps {
        container(name: 'kaniko', shell: '/busybox/sh') {
          sh 'pwd'
          sh '''#!/busybox/sh
            /kaniko/executor --dockerfile `pwd`/Dockerfile --context `pwd` --destination=${IMAGE_NAME}:${IMAGE_TAG} --destination=${IMAGE_NAME}:latest
          '''
        }
      }
    }
  }
}
